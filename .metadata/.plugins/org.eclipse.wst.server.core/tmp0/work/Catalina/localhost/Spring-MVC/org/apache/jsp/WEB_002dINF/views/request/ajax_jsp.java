/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-10-17 01:55:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.request;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>AJAX 파일 업로드</h1>\r\n");
      out.write("	<form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/request/ajax\" method=\"POST\"\r\n");
      out.write("	      enctype=\"multipart/form-data\">\r\n");
      out.write("       <table class=\"board\">\r\n");
      out.write("           <tr>\r\n");
      out.write("               <td class=\"label\">제목</td>\r\n");
      out.write("               <td class=\"data\">\r\n");
      out.write("                   <input type=\"text\" name=\"title\" id=\"title\" class=\"input-text\">\r\n");
      out.write("               </td>\r\n");
      out.write("           </tr>\r\n");
      out.write("           <tr>\r\n");
      out.write("               <td class=\"label\">작성자</td>\r\n");
      out.write("               <td class=\"data\">\r\n");
      out.write("                   <input type=\"text\" name=\"writer\" id=\"writer\" class=\"input-text\">\r\n");
      out.write("               </td>\r\n");
      out.write("           </tr>\r\n");
      out.write("           <tr>\r\n");
      out.write("               <td class=\"label\">내용</td>\r\n");
      out.write("               <td class=\"data\">\r\n");
      out.write("                   <textarea name=\"content\" id=\"content\" cols=\"30\" rows=\"10\" \r\n");
      out.write("                             class=\"input-textarea\"></textarea>\r\n");
      out.write("               </td>\r\n");
      out.write("           </tr>\r\n");
      out.write("           <tr>\r\n");
      out.write("               <td class=\"label\">파일</td>\r\n");
      out.write("               <td class=\"data\">\r\n");
      out.write("                   <input type=\"file\" name=\"file\" id=\"file\" multiple>\r\n");
      out.write("               </td>\r\n");
      out.write("           </tr>\r\n");
      out.write("       </table>\r\n");
      out.write("\r\n");
      out.write("       <div class=\"btn-box\">\r\n");
      out.write("           <div class=\"item\">\r\n");
      out.write("               <a href=\"javascript:;\" class=\"btn\" id=\"btn-insert\">등록</a>\r\n");
      out.write("           </div>\r\n");
      out.write("       </div>\r\n");
      out.write("   </form>\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   <!-- script -->\r\n");
      out.write("   <script src=\"https://code.jquery.com/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("   <script>\r\n");
      out.write("   // 등록 버튼 - 클릭 이벤트\r\n");
      out.write("   $('#btn-insert').on('click', function() {\r\n");
      out.write("       // 등록 요청\r\n");
      out.write("       let formData = new FormData()       // 폼 데이터 객체\r\n");
      out.write("\r\n");
      out.write("       let title = $('#title').val()\r\n");
      out.write("       let writer = $('#writer').val()\r\n");
      out.write("       let content = $('#content').val()\r\n");
      out.write("       \r\n");
      out.write("       formData.append('title', title)\r\n");
      out.write("       formData.append('writer', writer)\r\n");
      out.write("       formData.append('content', content)\r\n");
      out.write("       \r\n");
      out.write("       // 파일 입력 가져오기\r\n");
      out.write("       let file = $('#file')[0]\r\n");
      out.write("       let files = file.files\r\n");
      out.write("       // 파일 데이터 추가\r\n");
      out.write("       for (let i = 0; i < files.length; i++) {\r\n");
      out.write("           formData.append('file', files[i])\r\n");
      out.write("       }\r\n");
      out.write("\r\n");
      out.write("       let url = 'http://localhost:8080/Spring-MVC/request/ajax'\r\n");
      out.write("       $.ajax({\r\n");
      out.write("           url             :   url,\r\n");
      out.write("           type            :   'POST',\r\n");
      out.write("           data            :   formData,\r\n");
      out.write("           contentType     :   false,\r\n");
      out.write("           processData     :   false,      // 데이터 컨텐츠 타입 자동 변환 여부\r\n");
      out.write("                                           // 기본값(true) \r\n");
      out.write("                                           // true  -> contentType  : application/x-www-form-urlencoded\r\n");
      out.write("                                           // false -> contentType  : 데이터를 자동으로 처리하지 않고 직접 지정\r\n");
      out.write("           success         : function(response) {\r\n");
      out.write("               if( response == 'SUCCESS' ){\r\n");
      out.write("                   alert('등록이 완료되었습니다.')\r\n");
      out.write("               }\r\n");
      out.write("           },\r\n");
      out.write("           error           : function(request, status, error){\r\n");
      out.write("               alert(\"code:\"+request.status+\"\\n\"+\"message:\"+request.responseText+\"\\n\"+\"error:\"+error);\r\n");
      out.write("           }\r\n");
      out.write("\r\n");
      out.write("       })\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   })\r\n");
      out.write("   </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
